#define MULTIMATERIAL

uniform sampler2D baseMap;
uniform int ValueTexture0;
#ifdef MULTIMATERIAL
uniform float fMultimaterial;
#endif // MULTIMATERIAL

varying vec4 vVertexPos;
varying vec3 N;
varying vec3 V;
varying vec2 Texcoord;

#ifdef MULTIMATERIAL
varying float nPSMatID;
#endif // MULTIMATERIAL

vec4 GetLightInfluence( gl_LightSourceParameters light, vec4 vPos, vec3 N, vec3 V, vec4 diffuseColor );
float GetAttenuationFactor( vec4 vertexPos, gl_LightSourceParameters light );

void main()
{
	gl_FragColor = vec4( 0,0,0,0);
	
	vec4 diffuseColor;
	if ( ValueTexture0 != 0 )
		diffuseColor = texture2D( baseMap, Texcoord );
	else
		diffuseColor = gl_FrontMaterial.diffuse;
	for ( int i = 0; i < 8; i++ )
		gl_FragColor += GetLightInfluence( gl_LightSource[i], vVertexPos, N, V, diffuseColor );
		
#ifdef MULTIMATERIAL
	int bMultimaterial = int( fMultimaterial );
	if( bMultimaterial == 1 )
	{
		int nID = int(nPSMatID);
		switch( nID )
		{
		case 1:
			gl_FragColor = vec4(1, 1, 0, 0);
			break;
		default:
			gl_FragColor = vec4( 1, 1, 1, 1 );
			break;
		}
	}		
#endif // MULTIMATERIAL
}

vec4 GetLightInfluence( gl_LightSourceParameters light, vec4 vPos, vec3 N, vec3 V, vec4 diffuseColor )
{
	vec4 vAmbient = gl_FrontMaterial.ambient * light.ambient;
	vec3 L = normalize(light.position - vPos).xyz;
	vec4 vDiffuse = max(dot(L,N), 0.) * diffuseColor * light.diffuse;
	vec3 R = reflect( -L, N );
	vec4 vSpecular = pow(max(dot(R,V),0.), gl_FrontMaterial.shininess) * gl_FrontMaterial.specular * light.specular;
	float fAttenuationFactor = GetAttenuationFactor( vPos, light );
	return fAttenuationFactor * ( vAmbient + vDiffuse + vSpecular );
}

float GetAttenuationFactor( vec4 vertexPos, gl_LightSourceParameters light )
{
	float fDistance = distance(light.position, vertexPos);
	return 1. / ( light.constantAttenuation + light.linearAttenuation * fDistance + light.quadraticAttenuation*pow(fDistance,2.) );
}