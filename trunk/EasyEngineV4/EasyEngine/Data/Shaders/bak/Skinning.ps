uniform sampler2D baseMap;
uniform int ValueTexture0;

varying vec4 vVertexPos;
varying vec3 N;
varying vec3 V;
varying vec2 Texcoord;

vec4 GetLightInfluence( gl_LightSourceParameters light, vec4 vVertexPos, vec3 N, vec3 V );
float GetAttenuationFactor( vec4 vertexPos, gl_LightSourceParameters light );

void main()
{
	gl_FragColor = vec4( 0,0,0,0);
	for ( int i = 0; i < 8; i++ )
		gl_FragColor += GetLightInfluence( gl_LightSource[i], vVertexPos, N, V );
		
	if ( ValueTexture0 != 0 )
		gl_FragColor *= texture2D( baseMap, Texcoord );
		
}

vec4 GetLightInfluence( gl_LightSourceParameters light, vec4 vVertexPos, vec3 N, vec3 V )
{
	vec4 vAmbient = gl_FrontMaterial.ambient * light.ambient;
	vec3 L = normalize(light.position - vVertexPos).xyz;
	vec4 vDiffuse = max(dot(L,N), 0.) * gl_FrontMaterial.diffuse * light.diffuse;
	vec3 R = reflect( -L, N );
	vec4 vSpecular = pow(max(dot(R,V),0.), gl_FrontMaterial.shininess) * gl_FrontMaterial.specular * light.specular;
	float fAttenuationFactor = GetAttenuationFactor( vVertexPos, light );
	return fAttenuationFactor * ( vAmbient + vDiffuse + vSpecular );
}

float GetAttenuationFactor( vec4 vertexPos, gl_LightSourceParameters light )
{
	float fDistance = distance(light.position, vertexPos);
	return 1. / ( light.constantAttenuation + light.linearAttenuation * fDistance + light.quadraticAttenuation*pow(fDistance,2.) );
}